@page "/sentence-case"
@using TextHub.Services
@using TextHub.UIComponent
@using Microsoft.JSInterop
@using System.Text
@inject JsonLdService JsonLdService
@inject ToolDataService ToolDataService
@inject IJSRuntime JSRuntime

<PageTitle>Sentence Case Converter - Text Hub</PageTitle>

<DynamicJsonLd JsonLdContent="@_jsonLdContent" Id="sentencecase-jsonld" />

<main class="flex-1">
    <div class="container mx-auto px-4 py-8 md:py-12 animate-fade-in">
        <div class="max-w-4xl mx-auto">
            <div class="text-center mb-8 md:mb-10">
                <div class="inline-flex items-center justify-center p-2.5 sm:p-3 bg-primary/10 rounded-lg mb-3 md:mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-case-sensitive w-6 h-6 sm:w-8 sm:h-8 text-primary">
                        <path d="m3 15 4-8 4 8"></path>
                        <path d="M4 13h6"></path>
                        <circle cx="18" cy="12" r="3"></circle>
                        <path d="M21 9v6"></path>
                    </svg>
                </div>
                <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-3 md:mb-4">
                    <span class="text-gradient">Sentence Case Converter</span>
                </h1>
                <p class="text-base sm:text-lg text-muted-foreground px-4">Capitalize first letter of sentences</p>
            </div>
            
            <div class="grid gap-4 md:gap-6">
                <div class="animate-fade-in" style="animation-delay: 100ms;">
                    <label class="block text-sm font-medium mb-2">Input Text</label>
                    <textarea 
                        @bind="_inputText" 
                        @oninput="ConvertToSentenceCase"
                        placeholder="Enter or paste your text here..." 
                        class="input-area min-h-[150px] sm:min-h-[200px] text-sm sm:text-base"></textarea>
                </div>
                
                <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center animate-fade-in" style="animation-delay: 200ms;">
                    <button @onclick="ConvertToSentenceCase" class="btn-primary w-full sm:w-auto text-sm sm:text-base">Convert to Sentence Case</button>
                    <button @onclick="ClearText" class="btn-secondary w-full sm:w-auto text-sm sm:text-base">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rotate-ccw w-4 h-4 mr-2 inline">
                            <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
                            <path d="M3 3v5h5"></path>
                        </svg>
                        Reset
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(_outputText))
                {
                    <div class="animate-fade-in" style="animation-delay: 300ms;">
                        <label class="block text-sm font-medium mb-2">Result</label>
                        <div class="relative">
                            <textarea 
                                @bind="_outputText"
                                class="input-area min-h-[150px] sm:min-h-[200px] text-sm sm:text-base bg-muted"
                                readonly></textarea>
                            <button @onclick="CopyResult" 
                                    class="absolute top-2 right-2 p-2 bg-primary/10 hover:bg-primary/20 rounded-md transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy">
                                    <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
                                    <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <div class="mt-8 md:mt-12 p-4 md:p-6 bg-muted/30 rounded-lg animate-fade-in" style="animation-delay: 300ms;">
                <h2 class="text-lg md:text-xl font-semibold mb-2 md:mb-3">How it works</h2>
                <ul class="space-y-1.5 md:space-y-2 text-sm md:text-base text-muted-foreground">
                    <li>• Simply paste or type your text in the input box</li>
                    <li>• Click "Convert to Sentence Case" to transform your text</li>
                    <li>• Copy the result to your clipboard with one click</li>
                    <li>• Perfect for paragraphs, articles, and regular text formatting</li>
                </ul>
            </div>
        </div>
    </div>
</main>

@code {
    private string _inputText = string.Empty;
    private string _outputText = string.Empty;
    private string _jsonLdContent = string.Empty;

    // Sentence ending punctuation marks
    private readonly char[] _sentenceEnders = { '.', '!', '?' };

    protected override void OnInitialized()
    {
        var tool = ToolDataService.GetTextCaseTools().FirstOrDefault(t => t.Href == "/sentence-case");
        if (tool != null)
        {
            _jsonLdContent = JsonLdService.GenerateToolPageJsonLd(tool, "Text Case Tools");
        }
    }

    private void ConvertToSentenceCase()
    {
        if (string.IsNullOrWhiteSpace(_inputText))
        {
            _outputText = string.Empty;
            return;
        }

        var result = new StringBuilder();
        var chars = _inputText.ToCharArray();
        bool newSentence = true;

        for (int i = 0; i < chars.Length; i++)
        {
            char currentChar = chars[i];

            if (char.IsWhiteSpace(currentChar))
            {
                result.Append(currentChar);
                continue;
            }

            if (newSentence && char.IsLetter(currentChar))
            {
                result.Append(char.ToUpper(currentChar));
                newSentence = false;
            }
            else if (_sentenceEnders.Contains(currentChar))
            {
                result.Append(currentChar);
                newSentence = true;
            }
            else
            {
                result.Append(char.ToLower(currentChar));
            }
        }

        _outputText = result.ToString();
    }

    private void ClearText()
    {
        _inputText = string.Empty;
        _outputText = string.Empty;
    }

    private async Task CopyResult()
    {
        if (!string.IsNullOrEmpty(_outputText))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _outputText);
        }
    }
}
