@page "/json-formatter"
@using TextHub.Services.Data
@using TextHub.Components.Shared
@using Microsoft.JSInterop
@using System.Text.Json
@inject JsonLdService JsonLdService
@inject ToolDataService ToolDataService
@inject IJSRuntime JSRuntime

<PageTitle>JSON Formatter - Text Hub</PageTitle>

<DynamicJsonLd JsonLdContent="@_jsonLdContent" Id="json-formatter-jsonld" />

<main class="flex-1">
    <div class="container mx-auto px-4 py-8 md:py-12 animate-fade-in">
        <div class="max-w-4xl mx-auto">
            <div class="text-center mb-8 md:mb-10">
                <div class="inline-flex items-center justify-center p-2.5 sm:p-3 bg-secondary/10 rounded-lg mb-3 md:mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-braces w-6 h-6 sm:w-8 sm:h-8 text-secondary">
                        <path d="M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5a2 2 0 0 0 2 2h1"></path>
                        <path d="M16 21h1a2 2 0 0 0 2-2v-5a2 2 0 0 1 2-2 2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1"></path>
                    </svg>
                </div>
                <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-3 md:mb-4">
                    <span class="text-gradient">JSON Formatter</span>
                </h1>
                <p class="text-base sm:text-lg text-muted-foreground px-4">Format, validate, and beautify JSON data with syntax highlighting</p>
            </div>
            
            <div class="mb-4 md:mb-6 p-3 md:p-4 bg-muted/30 rounded-lg animate-fade-in" style="animation-delay: 100ms;">
                <h3 class="font-semibold mb-2 md:mb-3 text-sm md:text-base">Formatting Options</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-3">
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" @bind="PrettyPrint" class="w-4 h-4 text-primary rounded focus:ring-primary">
                        <span class="text-xs sm:text-sm">Pretty print</span>
                    </label>
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" @bind="ValidateJson" class="w-4 h-4 text-primary rounded focus:ring-primary">
                        <span class="text-xs sm:text-sm">Validate JSON</span>
                    </label>
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" @bind="MinifyJson" class="w-4 h-4 text-primary rounded focus:ring-primary">
                        <span class="text-xs sm:text-sm">Minify JSON</span>
                    </label>
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" @bind="SortKeys" class="w-4 h-4 text-primary rounded focus:ring-primary">
                        <span class="text-xs sm:text-sm">Sort keys</span>
                    </label>
                    <label class="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" @bind="ShowLineNumbers" class="w-4 h-4 text-primary rounded focus:ring-primary">
                        <span class="text-xs sm:text-sm">Show line numbers</span>
                    </label>
                </div>
            </div>
            
            <div class="grid gap-4 md:gap-6">
                <div class="animate-fade-in" style="animation-delay: 200ms;">
                    <div class="flex justify-between items-center mb-2">
                        <label class="block text-sm font-medium">Input JSON</label>
                        <span class="text-xs text-muted-foreground">@_inputTextValue.Length characters</span>
                    </div>
                    <textarea 
                        @bind="InputText" 
                        @bind:event="oninput"
                        placeholder="Paste your JSON data here..." 
                        class="input-area min-h-[200px] sm:min-h-[250px] text-sm sm:text-base font-mono"></textarea>
                </div>
                
                <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center animate-fade-in" style="animation-delay: 300ms;">
                    <button @onclick="FormatJson" class="btn-primary w-full sm:w-auto text-sm sm:text-base">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-code w-4 h-4 mr-2 inline">
                            <polyline points="16 18 22 12 16 6"></polyline>
                            <polyline points="8 6 2 12 8 18"></polyline>
                        </svg>
                        Format JSON
                    </button>
                    <button @onclick="ValidateJsonAction" class="btn-secondary w-full sm:w-auto text-sm sm:text-base">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-circle w-4 h-4 mr-2 inline">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                        Validate
                    </button>
                    <button @onclick="ResetText" class="btn-secondary w-full sm:w-auto text-sm sm:text-base">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rotate-ccw w-4 h-4 mr-2 inline">
                            <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
                            <path d="M3 3v5h5"></path>
                        </svg>
                        Reset
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="p-4 bg-red-50 border border-red-200 rounded-lg animate-fade-in">
                        <div class="flex items-center gap-2 text-red-800">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-circle">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="12" x2="12" y1="8" y2="12"></line>
                                <line x1="12" x2="12.01" y1="16" y2="16"></line>
                            </svg>
                            <span class="font-medium">JSON Error:</span>
                        </div>
                        <p class="text-red-700 text-sm mt-1">@_errorMessage</p>
                    </div>
                }
                
                @if (_isValidJson && !string.IsNullOrEmpty(_formattedJson))
                {
                    <div class="animate-scale-in">
                        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 mb-2">
                            <div class="flex items-center gap-3">
                                <label class="block text-sm font-medium">Formatted JSON</label>
                                <span class="text-xs text-muted-foreground">@_formattedJson.Length characters</span>
                            </div>
                            <div class="flex items-center gap-4">
                                <div class="flex items-center gap-2 text-xs sm:text-sm text-green-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-circle">
                                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                    </svg>
                                    Valid JSON
                                </div>
                                <button @onclick="CopyToClipboard" class="flex items-center gap-2 text-xs sm:text-sm text-primary hover:text-primary-hover transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy w-3 h-3 sm:w-4 sm:h-4">
                                        <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
                                        <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
                                    </svg>
                                    Copy to Clipboard
                                </button>
                            </div>
                        </div>
                        <div class="input-area min-h-[200px] sm:min-h-[250px] text-sm sm:text-base bg-muted/50 border-muted p-3 overflow-auto font-mono">
                            @if (ShowLineNumbers)
                            {
                                <pre class="whitespace-pre-wrap">@_formattedJsonWithLineNumbers</pre>
                            }
                            else
                            {
                                <pre class="whitespace-pre-wrap">@_formattedJson</pre>
                            }
                        </div>
                    </div>
                }
            </div>
            
            <div class="mt-8 md:mt-12 p-4 md:p-6 bg-muted/30 rounded-lg animate-fade-in" style="animation-delay: 400ms;">
                <h2 class="text-lg md:text-xl font-semibold mb-2 md:mb-3">How it works</h2>
                <ul class="space-y-1.5 md:space-y-2 text-sm md:text-base text-muted-foreground">
                    <li>• Paste your JSON data in the input field</li>
                    <li>• Choose formatting options like pretty print or minify</li>
                    <li>• Validate JSON syntax and get error messages</li>
                    <li>• Copy the formatted result to your clipboard</li>
                </ul>
            </div>
            
        </div>
    </div>
</main>

@code {
    private string _inputTextValue = "{\"name\":\"John\",\"age\":30,\"city\":\"New York\",\"hobbies\":[\"reading\",\"swimming\"]}";
    private string _formattedJson = "";
    private string _formattedJsonWithLineNumbers = "";
    private string _errorMessage = "";
    private bool _isValidJson = false;
    private bool PrettyPrint = true;
    private bool ValidateJson = true;
    private bool MinifyJson = false;
    private bool SortKeys = false;
    private bool ShowLineNumbers = false;
    private string _jsonLdContent = string.Empty;

    private string InputText
    {
        get => _inputTextValue;
        set
        {
            _inputTextValue = value;
            _errorMessage = "";
            _isValidJson = false;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        var tool = ToolDataService.GetTextFormattingTools().FirstOrDefault(t => t.Href == "/json-formatter");
        if (tool != null)
        {
            _jsonLdContent = JsonLdService.GenerateToolPageJsonLd(tool, "Text Formatting Tools");
        }
        
        // Format the default JSON
        FormatJson();
    }

    private void FormatJson()
    {
        if (string.IsNullOrWhiteSpace(_inputTextValue))
        {
            _formattedJson = "";
            _formattedJsonWithLineNumbers = "";
            _errorMessage = "";
            _isValidJson = false;
            return;
        }

        try
        {
            // Parse JSON to validate
            using var document = JsonDocument.Parse(_inputTextValue);
            _isValidJson = true;
            _errorMessage = "";

            // Get the root element
            var rootElement = document.RootElement;

            // Apply sorting if requested
            if (SortKeys)
            {
                rootElement = SortJsonKeys(rootElement);
            }

            // Format JSON
            var options = new JsonSerializerOptions
            {
                WriteIndented = PrettyPrint && !MinifyJson,
                PropertyNamingPolicy = null
            };

            _formattedJson = JsonSerializer.Serialize(rootElement, options);

            // Generate line numbers if requested
            if (ShowLineNumbers)
            {
                _formattedJsonWithLineNumbers = AddLineNumbers(_formattedJson);
            }
        }
        catch (JsonException ex)
        {
            _isValidJson = false;
            _errorMessage = ex.Message;
            _formattedJson = "";
            _formattedJsonWithLineNumbers = "";
        }
        catch (Exception ex)
        {
            _isValidJson = false;
            _errorMessage = $"Unexpected error: {ex.Message}";
            _formattedJson = "";
            _formattedJsonWithLineNumbers = "";
        }

        StateHasChanged();
    }

    private void ValidateJsonAction()
    {
        if (string.IsNullOrWhiteSpace(_inputTextValue))
        {
            _errorMessage = "No JSON data to validate";
            _isValidJson = false;
            return;
        }

        try
        {
            using var document = JsonDocument.Parse(_inputTextValue);
            _isValidJson = true;
            _errorMessage = "";
        }
        catch (JsonException ex)
        {
            _isValidJson = false;
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _isValidJson = false;
            _errorMessage = $"Unexpected error: {ex.Message}";
        }

        StateHasChanged();
    }

    private JsonElement SortJsonKeys(JsonElement element)
    {
        if (element.ValueKind == JsonValueKind.Object)
        {
            var sortedProperties = element.EnumerateObject()
                .OrderBy(p => p.Name)
                .Select(p => new { p.Name, Value = SortJsonKeys(p.Value) })
                .ToDictionary(p => p.Name, p => p.Value);

            var jsonString = JsonSerializer.Serialize(sortedProperties);
            return JsonDocument.Parse(jsonString).RootElement;
        }
        else if (element.ValueKind == JsonValueKind.Array)
        {
            var sortedArray = element.EnumerateArray()
                .Select(SortJsonKeys)
                .ToArray();

            var jsonString = JsonSerializer.Serialize(sortedArray);
            return JsonDocument.Parse(jsonString).RootElement;
        }

        return element;
    }

    private string AddLineNumbers(string json)
    {
        var lines = json.Split('\n');
        var numberedLines = lines.Select((line, index) => $"{index + 1,3}: {line}");
        return string.Join('\n', numberedLines);
    }

    private void ResetText()
    {
        InputText = string.Empty;
        _formattedJson = "";
        _formattedJsonWithLineNumbers = "";
        _errorMessage = "";
        _isValidJson = false;
    }

    private void LoadExample(string exampleType)
    {
        switch (exampleType)
        {
            case "simple":
                InputText = "{\"name\":\"John Doe\",\"age\":30,\"email\":\"john@example.com\",\"active\":true}";
                break;
            case "array":
                InputText = "[{\"id\":1,\"name\":\"Alice\",\"role\":\"admin\"},{\"id\":2,\"name\":\"Bob\",\"role\":\"user\"},{\"id\":3,\"name\":\"Charlie\",\"role\":\"moderator\"}]";
                break;
            case "nested":
                InputText = "{\"user\":{\"profile\":{\"name\":\"Jane Smith\",\"age\":28,\"preferences\":{\"theme\":\"dark\",\"notifications\":true}},\"settings\":{\"language\":\"en\",\"timezone\":\"UTC\"}},\"metadata\":{\"created\":\"2024-01-01T00:00:00Z\",\"version\":\"1.0\"}}";
                break;
            case "api":
                InputText = "{\"status\":\"success\",\"code\":200,\"data\":{\"users\":[{\"id\":1,\"name\":\"Alice\"},{\"id\":2,\"name\":\"Bob\"}],\"pagination\":{\"page\":1,\"limit\":10,\"total\":2}},\"message\":\"Users retrieved successfully\",\"timestamp\":\"2024-01-01T12:00:00Z\"}";
                break;
        }
        FormatJson();
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _formattedJson);
        }
        catch
        {
            // Fallback for older browsers
            await JSRuntime.InvokeVoidAsync("eval", $"navigator.clipboard.writeText('{_formattedJson.Replace("'", "\\'")}')");
        }
    }
}
